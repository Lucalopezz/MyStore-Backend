// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  username     String
  role         Role      @default(USER)  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  active       Boolean   @default(true)
  picture      String?
  orders       Order[]
  carts        Cart[]
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  price       Decimal        @db.Decimal(10, 2)
  quantity    Int
  images      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  carts       CartProduct[]
  orders      ProductOrder[]
}

model Cart {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String        @unique 
  user      User         @relation(fields: [userId], references: [id])
  products  CartProduct[]

  @@index([userId])
}

model CartProduct {
  id        Int      @id @default(autoincrement())
  quantity  Int
  cartId    Int
  productId Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([productId])
  @@index([cartId])
}

model Order {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  status    String        @default("processando")
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  products  ProductOrder[]

  @@index([userId])
}

model ProductOrder {
  id        Int      @id @default(autoincrement())
  quantity  Int
  orderId   Int
  productId Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
  @@index([productId])
  @@index([orderId])
}
